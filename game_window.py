# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'game_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import shutil
import pickle

class Game:
    def __init__(self, name, save_location):
        """Game class containing all game and savefile information.
        name: (str) name of the game.
        save_location: (str) path of the savefile location"""
        self.name = name
        self.save_location = save_location
        self.directory = '\\'.join(self.save_location.split("\\")[:-1])
        self.profiles = [item.name for item in os.scandir(self.directory) if item.is_dir()]
        self.save_extention = "." + self.save_location.split("\\")[-1].split(".")[-1]

    def get_name(self):
        return self.name
    
    def get_location(self):
        return self.directory
    
    def get_profiles(self):
        return self.profiles
    
    def set_location(self, save_location):
        self.save_location = save_location
        self.directory = '\\'.join(self.save_location.split("\\")[:-1])
        Organizer.save_dict()
    
    #Profile management functions 
    def create_profile(self, profile_name):
        os.mkdir(os.path.join(self.directory, profile_name))
        print("Profile added.")

    def remove_profile(self, profile_name):
        shutil.rmtree(os.path.join(self.directory, profile_name))

    def show_profile(self):
        return [item.name for item in os.scandir(self.directory) if item.is_dir()]
    
    def get_sections(self, profile_name):
        return[item.name for item in os.scandir(os.path.join(self.directory, profile_name)) if item.is_dir()]
    
    def import_save(self, profile, section):
        """Imports the save to a profile and section. Profile can be any% for instance and section the part of the run to be saved.
        profile: (str) e.g. any%/all bosses.
        section: (str) e.g. intro/first bossfight/final boss"""
        save_target = os.path.join(self.directory, profile, section, self.save_location.split("\\")[-1])
        save_dir = os.path.join(self.directory, profile, section)
        if os.path.isdir(f"{self.directory}\\{profile}"):
            os.makedirs(save_dir, exist_ok=True)
            shutil.copyfile(self.save_location, save_target)
        else:
            print("Profile not found.")

    def load_save(self, profile, section):
        save_target = os.path.join(self.directory, profile, section, self.save_location.split("\\")[-1])
        shutil.copy(save_target, self.directory)

class Organizer:
    Game_dict: dict[str, Game] = {}
    def __init__(self):
        """Upon starting the program the games are loaded if the file exists"""
        if "Organizer.Game_dict.pkl" in os.listdir():
            Organizer.load_dict()
            print("Organizer.Game_dict loaded.")
    
    @staticmethod
    def add_game(name, save_location):
        """Function to add a game and create a game instance. This instance is then saved in the Organizer.Game_dict dictionary and saved.
        name: (str) name of the game.
        save_location: (str) location of the savefile."""
        if name not in Organizer.Game_dict.keys():
            Organizer.Game_dict[name] = Game(name, save_location)
            Organizer.save_dict()
            print("Game added.")
        else:
            print("Game already in game list.")
    @staticmethod
    def remove_game(name):
        """Remove game from dictionary and saves to file.
        name: (str) name of the game to be removed"""
        if name in Organizer.Game_dict.keys():
            Organizer.Game_dict.pop(name)
            Organizer.save_dict()
            print("Game removed.")
        else:
            print("Game not found.")

    @staticmethod
    def get_games():
        """Lists all games in the Games_dict file"""
        return list(Organizer.Game_dict.keys())
    
    @staticmethod
    def load_dict():
        """Function that loads in previously added games"""
        with open('Organizer.Game_dict.pkl', 'rb') as f:
            Organizer.Game_dict = pickle.load(f)
    
    @staticmethod
    def save_dict():
        """Function that serializes all games"""
        with open("Organizer.Game_dict.pkl", 'wb') as f:
            pickle.dump(Organizer.Game_dict, f)

m = Organizer()

class Ui_MainWindow(object):
    def populate_list(self):
        self.list_game.clear()
        self.games = m.get_games()
        for item in self.games:
            self.list_game.addItem(item)
    
    def add_ds3(self):
        m.add_game("DS3", str(QtWidgets.QFileDialog.getOpenFileName()[0].replace("/", "\\")))
        self.populate_list()

    def remove_game(self):
        todel = self.list_game.currentItem().text()
        m.remove_game(todel)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(505, 365)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.list_game = QtWidgets.QListWidget(self.centralwidget)
        self.list_game.setGeometry(QtCore.QRect(20, 40, 351, 271))
        self.list_game.setObjectName("list_game")
        self.label_game = QtWidgets.QLabel(self.centralwidget)
        self.label_game.setGeometry(QtCore.QRect(20, 20, 47, 13))
        self.label_game.setObjectName("label_game")
        self.button_add = QtWidgets.QPushButton(self.centralwidget)
        self.button_add.setGeometry(QtCore.QRect(380, 40, 111, 23))
        self.button_add.setObjectName("button_add")
        self.button_remove = QtWidgets.QPushButton(self.centralwidget)
        self.button_remove.setGeometry(QtCore.QRect(380, 70, 111, 23))
        self.button_remove.setObjectName("button_remove")
        self.button_remove.clicked.connect(self.remove_game)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 505, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_game.setText(_translate("MainWindow", "Games:"))
        self.button_add.setText(_translate("MainWindow", "Add"))
        self.button_remove.setText(_translate("MainWindow", "Remove"))
        self.populate_list()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
